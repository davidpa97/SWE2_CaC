/**
 * Command in Control Heartbeats API File
 * Maintained by: David Padilla-Arenivar
 * Boilerplate by: Jacob Beneski
 *   This file houses the main CiC API, which allows for the storing and retrieving of data from the
 *   shared database. Currently, the information involved only relates to heartbeat objects, which contain basic device
 *   diagnostic information generated by the IoT device gateway.
 **/

// Import and initialize Express
var express = require('express');
var router = express.Router();

// Import and initialize Mongoose and Heartbeat Schema
let mongoose = require('mongoose');
require('../schemas/heartbeat');
let Heartbeat = mongoose.model('Heartbeat');

// Import and initialize Heartbeat Settings Schema
require('../schemas/heartbeatSetting');
let HeartbeatSetting = mongoose.model('HeartbeatSetting');

/** GET all heartbeat listings in the DB **/
router.get('/', function(req, res, next) {
  // Search for all heartbeats, and return a callback.
  Heartbeat.find({}, (err, heartbeats) =>{
    // If there is an error, return the error to response.
    // Otherwise return the list of all heartbeats in JSON format.
    err ? res.status(401).json(err) : res.json(heartbeats);
  });
});

/** GET clear all heartbeats from the DB (for testing purposes) **/
router.get('/clear', function(req, res, next) {
  Heartbeat.deleteMany({},(err, data)=>{
    // If there is an error, return the error to response.
    // Otherwise return a JSON object listing how many entries were deleted (by default).
    err ? res.status(401).json(err) : res.json(data);
  });
});

/** POST Add heartbeat to the heartbeats collection in the Mongo DB **/
router.post('/add', function(req, res){

  // Get JSON out of request, along with parameters
  console.log(req.body);
  let requestData = req.body;
  let gwID = requestData.gwID; // Gateway ID, provided by Gateway
  let wtID = requestData.wtID; // Wind Turbine ID, provided by IoT Device
  let timestamp = requestData.timestamp; // Timestamp of when request was sent, provided by Gateway

  //Code to generate custom, workable timestamp. Yields a date string, XX/XX/XXXX, and time string, XX:XX:XX.
  const dateObj = new Date();
  const currDate = "" + (dateObj.getMonth()+1) + "/" + dateObj.getDate() + "/" + dateObj.getFullYear();
  console.log('currDate: ' + currDate);

  let hours = dateObj.getHours().toString();
  if(hours.length === 1){
    hours = "0" + hours;
  }

  let minutes = dateObj.getMinutes().toString();
  if(minutes.length === 1){
    minutes = "0" + minutes;
  }

  let seconds = dateObj.getSeconds().toString();
  if(seconds.length === 1){
    seconds = "0" + seconds;
  }

  const currTime = "" + hours + ":" + minutes + ":" + seconds;
  console.log("currTime: " + currTime);

  // Create a new heartbeat object with received data and current time.
  let newHeartbeat = new Heartbeat({
    gwID: gwID,
    wtID: wtID,
    sentTime: timestamp,
    receivedTime:
        {
          date: currDate,
          time: currTime
        }
  });

  // Save the heartbeat in the heartbeats collection in the DB,
  // and if there's an error, it returns the error along with a
  // 401 status code.
  newHeartbeat.save((err, data)=>{
    err ? res.status(401).json(err) : res.json(data);
  });
});

/** Heartbeat Settings Endpoints **/

/** GET default heartbeat settings **/
router.get('/defaultSettings', function(req, res, next) {

  // Get JSON out of request, along with parameters
  console.log(req.query);
  let requestData = req.query;
  let gwID = requestData.gwID;

  // Search for all heartbeats, and return a callback.
  HeartbeatSetting.findOne({ gwID: gwID }, (err, heartbeats) =>{
    // If there is an error, return the error to response. Otherwise return the list of all users in JSON format.
    err ? res.status(401).json(err) : res.json(heartbeats);
  });
});

/** GET clear all heartbeat settings from the DB (for testing purposes) **/
router.get('/clearSettings', function(req, res, next) {
  HeartbeatSetting.deleteMany({},(err, data)=>{
    // If there is an error, return the error to response.
    // Otherwise return a JSON object listing how many entries were deleted (by default).
    err ? res.status(401).json(err) : res.json(data);
  });
});

/** POST adds a default heartbeat setting to the DB **/
router.post('/addDefaultSetting', function(req, res){
  //Get JSON out of request, along with parameters
  console.log(req.body);
  let requestData = req.body;
  let gwID = requestData.gwID; // Gateway ID of gateway being added.
  let hbFrequency = requestData.hbFrequency; // How often a heartbeat is sent, in seconds.

  let newHeartbeatSetting = new HeartbeatSetting({
    gwID: gwID,
    hbFrequency: hbFrequency
  });

  // Save the gateway in the gateways collection in the DB,
  // and if there's an error, it returns the error along with a
  // 401 status code.
  newHeartbeatSetting.save((err, data)=>{
    err ? res.status(401).json(err) : res.json(data);
  });
});

/** POST update default heartbeat settings for a gateway based on gateway ID **/
router.post('/editDefaultSettings', function(req, res){

  //Get JSON out of request, along with parameters
  console.log(req.body);
  let requestData = req.body;
  let gwID = requestData.gwID; // Gateway ID of gateway being updated.
  let hbFrequency = requestData.hbFrequency; // Frequency (time between) of heartbeats, in seconds.

  //Search for document with the same gwID that is in the request body
  let query = { gwID: gwID };

  //Update value for 'hbFrequency' to the one given in the request
  let newValue = { $set: { hbFrequency: hbFrequency}};

  //Find existing heartbeat settings for the given gateway, update value with new hbFrequency
  //Return 401 error if a problem occurs
  console.log("Query: " + query + ", newValue: " + newValue);
  HeartbeatSetting.updateOne(query, newValue, function(err, data) {
    err ? res.status(401).json(err) : res.json(data);
    console.log("Gateway " + gwID + " heartbeat frequency updated.");
    console.log(err);
  });
});

module.exports = router;
